# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import anya_pb2 as anya__pb2


class AnyaIMStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Convert = channel.unary_unary(
                '/anya.AnyaIM/Convert',
                request_serializer=anya__pb2.ConvReq.SerializeToString,
                response_deserializer=anya__pb2.ConvRsp.FromString,
                )
        self.PartialConvert = channel.unary_unary(
                '/anya.AnyaIM/PartialConvert',
                request_serializer=anya__pb2.PartConvReq.SerializeToString,
                response_deserializer=anya__pb2.PartConvRsp.FromString,
                )


class AnyaIMServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Convert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PartialConvert(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AnyaIMServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Convert': grpc.unary_unary_rpc_method_handler(
                    servicer.Convert,
                    request_deserializer=anya__pb2.ConvReq.FromString,
                    response_serializer=anya__pb2.ConvRsp.SerializeToString,
            ),
            'PartialConvert': grpc.unary_unary_rpc_method_handler(
                    servicer.PartialConvert,
                    request_deserializer=anya__pb2.PartConvReq.FromString,
                    response_serializer=anya__pb2.PartConvRsp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'anya.AnyaIM', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AnyaIM(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Convert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/anya.AnyaIM/Convert',
            anya__pb2.ConvReq.SerializeToString,
            anya__pb2.ConvRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PartialConvert(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/anya.AnyaIM/PartialConvert',
            anya__pb2.PartConvReq.SerializeToString,
            anya__pb2.PartConvRsp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
